diff -up nfs-utils-1.2.3/support/include/xlog.h.orig nfs-utils-1.2.3/support/include/xlog.h
--- nfs-utils-1.2.3/support/include/xlog.h.orig	2010-09-28 08:24:16.000000000 -0400
+++ nfs-utils-1.2.3/support/include/xlog.h	2014-04-29 14:49:20.263545000 -0400
@@ -44,6 +44,7 @@ int			xlog_enabled(int fac);
 void			xlog(int fac, const char *fmt, ...);
 void			xlog_warn(const char *fmt, ...);
 void			xlog_err(const char *fmt, ...);
+void			xlog_errno(int err, const char *fmt, ...);
 void			xlog_backend(int fac, const char *fmt, va_list args);
 
 #endif /* XLOG_H */
diff -up nfs-utils-1.2.3/support/nfs/xlog.c.orig nfs-utils-1.2.3/support/nfs/xlog.c
--- nfs-utils-1.2.3/support/nfs/xlog.c.orig	2010-09-28 08:24:16.000000000 -0400
+++ nfs-utils-1.2.3/support/nfs/xlog.c	2014-04-29 14:49:20.269545000 -0400
@@ -27,6 +27,7 @@
 #include <stdio.h>
 #include <stdarg.h>
 #include <syslog.h>
+#include <errno.h>
 #include "nfslib.h"
 
 #undef	VERBOSE_PRINTF
@@ -215,3 +216,14 @@ xlog_err(const char* fmt, ...)
 	xlog_backend(L_FATAL, fmt, args);
 	va_end(args);
 }
+
+void
+xlog_errno(int err, const char *fmt, ...)
+{
+	va_list args;
+
+	errno = err;
+	va_start(args, fmt);
+	xlog_backend(L_FATAL, fmt, args);
+	va_end(args);
+}
diff -up nfs-utils-1.2.3/utils/nfsidmap/nfsidmap.c.orig nfs-utils-1.2.3/utils/nfsidmap/nfsidmap.c
--- nfs-utils-1.2.3/utils/nfsidmap/nfsidmap.c.orig	2014-04-29 14:39:08.212434000 -0400
+++ nfs-utils-1.2.3/utils/nfsidmap/nfsidmap.c	2014-04-29 14:54:18.912383000 -0400
@@ -58,7 +58,7 @@ int id_lookup(char *name_at_domain, key_
 		sprintf(id, "%u", gid);
 	}
 	if (rc < 0)
-		xlog_err("id_lookup: %s: failed: %m",
+		xlog_errno(rc, "id_lookup: %s: failed: %m",
 			(type == USER ? "nfs4_owner_to_uid" : "nfs4_group_owner_to_gid"));
 
 	if (rc == 0) {
@@ -99,8 +99,9 @@ int name_lookup(char *id, key_serial_t k
 
 	rc = nfs4_get_default_domain(NULL, domain, NFS4_MAX_DOMAIN_LEN);
 	if (rc != 0) {
+		xlog_errno(rc,
+			"name_lookup: nfs4_get_default_domain failed: %m");
 		rc = -1;
-		xlog_err("name_lookup: nfs4_get_default_domain failed: %m");
 		goto out;
 	}
 
@@ -112,7 +113,7 @@ int name_lookup(char *id, key_serial_t k
 		rc = nfs4_gid_to_name(gid, domain, name, IDMAP_NAMESZ);
 	}
 	if (rc < 0)
-		xlog_err("name_lookup: %s: failed: %m",
+		xlog_errno(rc, "name_lookup: %s: failed: %m",
 			(type == USER ? "nfs4_uid_to_name" : "nfs4_gid_to_name"));
 
 	if (rc == 0) {
@@ -243,7 +244,6 @@ int main(int argc, char **argv)
 	char *type;
 	int rc = 1, opt;
 	int timeout = 600;
-	int childrings = 0;
 	key_serial_t key, parent_keyring, child_keyring;
 	char *progname, *keystr = NULL;
 	char child_name[BUFSIZ];
@@ -287,8 +287,8 @@ int main(int argc, char **argv)
 		}
 	}
 
-	if (nfs4_init_name_mapping(PATH_IDMAPDCONF)) {
-		xlog_err("Unable to create name to user id mappings.");
+	if ((rc = nfs4_init_name_mapping(PATH_IDMAPDCONF))) {
+		xlog_errno(rc, "Unable to create name to user id mappings.");
 		return 1;
 	}
 	if (!verbose)
